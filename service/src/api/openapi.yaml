openapi: 3.0.1
info:
  title: 医审平台案件提交接口
  version: 1.0.0
servers:
- url: http://localhost:3001
paths:
  /createCase:
    post:
      operationId: createCase
      requestBody:
        content:
          application/json:
            example:
              custid: "21"
              uuid: ef30e1ca-9888-451d-a328-08bfc6a7d482
              token: Encrypted Payload（加密后的数据）
            schema:
              $ref: '#/components/schemas/CreateCaseDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                code: 200
                data: "9"
              schema:
                $ref: '#/components/schemas/ResDto'
          description: 推送案件成功
      summary: 用于接收渠道推送的案件信息
      x-eov-operation-handler: controllers/DefaultController
components:
  schemas:
    CreateCaseDto:
      example:
        custid: custid
        uuid: uuid
        token: token
      properties:
        custid:
          description: 客户渠道 ID
          type: string
        uuid:
          description: 标识本次请求的唯一标识，用于客户确认医审结果。由客户端保证唯一性
          type: string
        token:
          description: |
            经过加密后的案件数据信息。

            ## 加密方案
            ---

            为了保证数据的安全性，案件数据采用 `aes-256-ecb` 加密，加密结果使用 `base64` 编码。

            ### 1. 原始的案件详情数据结构

            原始的案件详情数据结构请参考：*CaseDetailDto*

            ### 2. 由平台方分配给用户的参数

            | 参数名 | 描述 | 给广东太保分配的值 |
            |:-------|:-----|:-----------------:|
            | custid | 用户渠道 ID | 21 |
            | appkey | 用户授权码 | asdfghjkl |
            | secretkey | 用户安全码 | dwsuhfci |
            | salt | 加密密钥明文 | gdtb |

            ### 3. 密钥

            `aes-256-ecb` 加密需要 32bits 的密钥，因此使用 `md5(salt).digest("hex")` 作为加密密钥。

            ### 4. 加密

            Node.js 示例：

            ```javascript
            const crypto = require("crypto");

            const md5 = crypto.createHash("md5");
            const cipher = crypto.createCipheriv(
              "aes-256-ecb",
              md5.update(salt).digest("hex"),
              ""
            );
            tokenCipher = cipher.update(JSON.stringify(token), "base64");
            tokenCipher += cipher.final("base64");
            ```
          type: string
      type: object
    ImageDetailDto:
      properties:
        id:
          description: 图片序号，在本案件中唯一。由客户端保证唯一性
          type: string
        name:
          description: 图片的名称。
          type: string
        url:
          description: 图片的 URL
          type: string
      type: object
    CaseDetailDto:
      properties:
        appkey:
          description: 给渠道客户分配的授权码。
          type: string
        images:
          description: 案件资料图片数组
          items:
            $ref: '#/components/schemas/ImageDetailDto'
          type: array
        insurecode:
          description: 被保险人身份证号
          type: string
        insurename:
          description: 被保险人姓名
          type: string
        registno:
          description: 报案号
          type: string
        sign:
          description: |
            签名，用以校验参数是否被篡改。

            **计算方法**：

            ```
            md5(appkey+registno+timestamp+uuid+secretkey).digest("hex")
            ```
          type: string
        timestamp:
          description: 接口调用时间
          type: string
        weight:
          description: 任务权重，默认为3，加急任务请设置为5。
          type: integer
        zmark:
          description: 保留字段，用于自定义信息，目前未使用。
          type: string
      type: object
    ResDto:
      example:
        msg: msg
        code: 0
        data: data
      properties:
        code:
          description: 结果代码。200：推送成功
          type: integer
        msg:
          description: 发生错误时，返回错误信息。成功时，不返回该字段。
          type: string
        data:
          description: 成功时，返回任务序号。错误时，不返回该字段。
          type: string
      type: object
