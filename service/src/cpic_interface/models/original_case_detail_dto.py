# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cpic_interface.models.base_model_ import Model
from cpic_interface.models.original_image_detail_dto import OriginalImageDetailDto
from cpic_interface import util

from cpic_interface.models.original_image_detail_dto import OriginalImageDetailDto  # noqa: E501

class OriginalCaseDetailDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appkey=None, images=None, insurecode=None, insure_name=None, regist_no=None, sign=None, timestamp=None, weight=None, zmark=None):  # noqa: E501
        """OriginalCaseDetailDto - a model defined in OpenAPI

        :param appkey: The appkey of this OriginalCaseDetailDto.  # noqa: E501
        :type appkey: str
        :param images: The images of this OriginalCaseDetailDto.  # noqa: E501
        :type images: List[OriginalImageDetailDto]
        :param insurecode: The insurecode of this OriginalCaseDetailDto.  # noqa: E501
        :type insurecode: str
        :param insure_name: The insure_name of this OriginalCaseDetailDto.  # noqa: E501
        :type insure_name: str
        :param regist_no: The regist_no of this OriginalCaseDetailDto.  # noqa: E501
        :type regist_no: str
        :param sign: The sign of this OriginalCaseDetailDto.  # noqa: E501
        :type sign: str
        :param timestamp: The timestamp of this OriginalCaseDetailDto.  # noqa: E501
        :type timestamp: str
        :param weight: The weight of this OriginalCaseDetailDto.  # noqa: E501
        :type weight: int
        :param zmark: The zmark of this OriginalCaseDetailDto.  # noqa: E501
        :type zmark: str
        """
        self.openapi_types = {
            'appkey': str,
            'images': List[OriginalImageDetailDto],
            'insurecode': str,
            'insure_name': str,
            'regist_no': str,
            'sign': str,
            'timestamp': str,
            'weight': int,
            'zmark': str
        }

        self.attribute_map = {
            'appkey': 'appkey',
            'images': 'images',
            'insurecode': 'insurecode',
            'insure_name': 'insureName',
            'regist_no': 'registNo',
            'sign': 'sign',
            'timestamp': 'timestamp',
            'weight': 'weight',
            'zmark': 'zmark'
        }

        self._appkey = appkey
        self._images = images
        self._insurecode = insurecode
        self._insure_name = insure_name
        self._regist_no = regist_no
        self._sign = sign
        self._timestamp = timestamp
        self._weight = weight
        self._zmark = zmark

    @classmethod
    def from_dict(cls, dikt) -> 'OriginalCaseDetailDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OriginalCaseDetailDto of this OriginalCaseDetailDto.  # noqa: E501
        :rtype: OriginalCaseDetailDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appkey(self):
        """Gets the appkey of this OriginalCaseDetailDto.

        给渠道客户分配的授权码。  # noqa: E501

        :return: The appkey of this OriginalCaseDetailDto.
        :rtype: str
        """
        return self._appkey

    @appkey.setter
    def appkey(self, appkey):
        """Sets the appkey of this OriginalCaseDetailDto.

        给渠道客户分配的授权码。  # noqa: E501

        :param appkey: The appkey of this OriginalCaseDetailDto.
        :type appkey: str
        """

        self._appkey = appkey

    @property
    def images(self):
        """Gets the images of this OriginalCaseDetailDto.

        案件资料图片数组  # noqa: E501

        :return: The images of this OriginalCaseDetailDto.
        :rtype: List[OriginalImageDetailDto]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this OriginalCaseDetailDto.

        案件资料图片数组  # noqa: E501

        :param images: The images of this OriginalCaseDetailDto.
        :type images: List[OriginalImageDetailDto]
        """

        self._images = images

    @property
    def insurecode(self):
        """Gets the insurecode of this OriginalCaseDetailDto.

        被保险人身份证号  # noqa: E501

        :return: The insurecode of this OriginalCaseDetailDto.
        :rtype: str
        """
        return self._insurecode

    @insurecode.setter
    def insurecode(self, insurecode):
        """Sets the insurecode of this OriginalCaseDetailDto.

        被保险人身份证号  # noqa: E501

        :param insurecode: The insurecode of this OriginalCaseDetailDto.
        :type insurecode: str
        """

        self._insurecode = insurecode

    @property
    def insure_name(self):
        """Gets the insure_name of this OriginalCaseDetailDto.

        被保险人姓名  # noqa: E501

        :return: The insure_name of this OriginalCaseDetailDto.
        :rtype: str
        """
        return self._insure_name

    @insure_name.setter
    def insure_name(self, insure_name):
        """Sets the insure_name of this OriginalCaseDetailDto.

        被保险人姓名  # noqa: E501

        :param insure_name: The insure_name of this OriginalCaseDetailDto.
        :type insure_name: str
        """

        self._insure_name = insure_name

    @property
    def regist_no(self):
        """Gets the regist_no of this OriginalCaseDetailDto.

        报案号  # noqa: E501

        :return: The regist_no of this OriginalCaseDetailDto.
        :rtype: str
        """
        return self._regist_no

    @regist_no.setter
    def regist_no(self, regist_no):
        """Sets the regist_no of this OriginalCaseDetailDto.

        报案号  # noqa: E501

        :param regist_no: The regist_no of this OriginalCaseDetailDto.
        :type regist_no: str
        """

        self._regist_no = regist_no

    @property
    def sign(self):
        """Gets the sign of this OriginalCaseDetailDto.

        签名，用以校验参数是否被篡改。  **计算方法**：  ``` md5(appkey+registno+timestamp+uuid+secretkey).digest(\"hex\") ```   # noqa: E501

        :return: The sign of this OriginalCaseDetailDto.
        :rtype: str
        """
        return self._sign

    @sign.setter
    def sign(self, sign):
        """Sets the sign of this OriginalCaseDetailDto.

        签名，用以校验参数是否被篡改。  **计算方法**：  ``` md5(appkey+registno+timestamp+uuid+secretkey).digest(\"hex\") ```   # noqa: E501

        :param sign: The sign of this OriginalCaseDetailDto.
        :type sign: str
        """

        self._sign = sign

    @property
    def timestamp(self):
        """Gets the timestamp of this OriginalCaseDetailDto.

        接口调用时间  # noqa: E501

        :return: The timestamp of this OriginalCaseDetailDto.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this OriginalCaseDetailDto.

        接口调用时间  # noqa: E501

        :param timestamp: The timestamp of this OriginalCaseDetailDto.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def weight(self):
        """Gets the weight of this OriginalCaseDetailDto.

        任务权重，默认为3，加急任务请设置为5。  # noqa: E501

        :return: The weight of this OriginalCaseDetailDto.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this OriginalCaseDetailDto.

        任务权重，默认为3，加急任务请设置为5。  # noqa: E501

        :param weight: The weight of this OriginalCaseDetailDto.
        :type weight: int
        """

        self._weight = weight

    @property
    def zmark(self):
        """Gets the zmark of this OriginalCaseDetailDto.

        保留字段，用于自定义信息，目前未使用。  # noqa: E501

        :return: The zmark of this OriginalCaseDetailDto.
        :rtype: str
        """
        return self._zmark

    @zmark.setter
    def zmark(self, zmark):
        """Sets the zmark of this OriginalCaseDetailDto.

        保留字段，用于自定义信息，目前未使用。  # noqa: E501

        :param zmark: The zmark of this OriginalCaseDetailDto.
        :type zmark: str
        """

        self._zmark = zmark
