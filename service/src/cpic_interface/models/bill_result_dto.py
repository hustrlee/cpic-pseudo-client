# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cpic_interface.models.base_model_ import Model
from cpic_interface.models.bill_result_dto_all_of import BillResultDtoAllOf
from cpic_interface.models.image_type_dto import ImageTypeDto
from cpic_interface import util

from cpic_interface.models.bill_result_dto_all_of import BillResultDtoAllOf  # noqa: E501
from cpic_interface.models.image_type_dto import ImageTypeDto  # noqa: E501

class BillResultDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_type=None, image_classification=None, total_amount=None, all_expense_amount=None, parts_expense_amount=None, reimbursement_amount=None, remark=None):  # noqa: E501
        """BillResultDto - a model defined in OpenAPI

        :param image_type: The image_type of this BillResultDto.  # noqa: E501
        :type image_type: str
        :param image_classification: The image_classification of this BillResultDto.  # noqa: E501
        :type image_classification: str
        :param total_amount: The total_amount of this BillResultDto.  # noqa: E501
        :type total_amount: float
        :param all_expense_amount: The all_expense_amount of this BillResultDto.  # noqa: E501
        :type all_expense_amount: float
        :param parts_expense_amount: The parts_expense_amount of this BillResultDto.  # noqa: E501
        :type parts_expense_amount: float
        :param reimbursement_amount: The reimbursement_amount of this BillResultDto.  # noqa: E501
        :type reimbursement_amount: float
        :param remark: The remark of this BillResultDto.  # noqa: E501
        :type remark: str
        """
        self.openapi_types = {
            'image_type': str,
            'image_classification': str,
            'total_amount': float,
            'all_expense_amount': float,
            'parts_expense_amount': float,
            'reimbursement_amount': float,
            'remark': str
        }

        self.attribute_map = {
            'image_type': 'imageType',
            'image_classification': 'imageClassification',
            'total_amount': 'totalAmount',
            'all_expense_amount': 'allExpenseAmount',
            'parts_expense_amount': 'partsExpenseAmount',
            'reimbursement_amount': 'reimbursementAmount',
            'remark': 'remark'
        }

        self._image_type = image_type
        self._image_classification = image_classification
        self._total_amount = total_amount
        self._all_expense_amount = all_expense_amount
        self._parts_expense_amount = parts_expense_amount
        self._reimbursement_amount = reimbursement_amount
        self._remark = remark

    @classmethod
    def from_dict(cls, dikt) -> 'BillResultDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BillResultDto of this BillResultDto.  # noqa: E501
        :rtype: BillResultDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_type(self):
        """Gets the image_type of this BillResultDto.

        图片类型。  # noqa: E501

        :return: The image_type of this BillResultDto.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this BillResultDto.

        图片类型。  # noqa: E501

        :param image_type: The image_type of this BillResultDto.
        :type image_type: str
        """
        allowed_values = ["发票", "清单", "结算单", "其它"]  # noqa: E501
        if image_type not in allowed_values:
            raise ValueError(
                "Invalid value for `image_type` ({0}), must be one of {1}"
                .format(image_type, allowed_values)
            )

        self._image_type = image_type

    @property
    def image_classification(self):
        """Gets the image_classification of this BillResultDto.

        图片分类  # noqa: E501

        :return: The image_classification of this BillResultDto.
        :rtype: str
        """
        return self._image_classification

    @image_classification.setter
    def image_classification(self, image_classification):
        """Sets the image_classification of this BillResultDto.

        图片分类  # noqa: E501

        :param image_classification: The image_classification of this BillResultDto.
        :type image_classification: str
        """
        allowed_values = ["门诊发票", "住院发票", "外购药发票", "门诊清单", "住院清单", "结算单", "其它"]  # noqa: E501
        if image_classification not in allowed_values:
            raise ValueError(
                "Invalid value for `image_classification` ({0}), must be one of {1}"
                .format(image_classification, allowed_values)
            )

        self._image_classification = image_classification

    @property
    def total_amount(self):
        """Gets the total_amount of this BillResultDto.

        总金额  # noqa: E501

        :return: The total_amount of this BillResultDto.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this BillResultDto.

        总金额  # noqa: E501

        :param total_amount: The total_amount of this BillResultDto.
        :type total_amount: float
        """

        self._total_amount = total_amount

    @property
    def all_expense_amount(self):
        """Gets the all_expense_amount of this BillResultDto.

        全部自费金额  # noqa: E501

        :return: The all_expense_amount of this BillResultDto.
        :rtype: float
        """
        return self._all_expense_amount

    @all_expense_amount.setter
    def all_expense_amount(self, all_expense_amount):
        """Sets the all_expense_amount of this BillResultDto.

        全部自费金额  # noqa: E501

        :param all_expense_amount: The all_expense_amount of this BillResultDto.
        :type all_expense_amount: float
        """

        self._all_expense_amount = all_expense_amount

    @property
    def parts_expense_amount(self):
        """Gets the parts_expense_amount of this BillResultDto.

        部分自费金额  # noqa: E501

        :return: The parts_expense_amount of this BillResultDto.
        :rtype: float
        """
        return self._parts_expense_amount

    @parts_expense_amount.setter
    def parts_expense_amount(self, parts_expense_amount):
        """Sets the parts_expense_amount of this BillResultDto.

        部分自费金额  # noqa: E501

        :param parts_expense_amount: The parts_expense_amount of this BillResultDto.
        :type parts_expense_amount: float
        """

        self._parts_expense_amount = parts_expense_amount

    @property
    def reimbursement_amount(self):
        """Gets the reimbursement_amount of this BillResultDto.

        医保报销金额  # noqa: E501

        :return: The reimbursement_amount of this BillResultDto.
        :rtype: float
        """
        return self._reimbursement_amount

    @reimbursement_amount.setter
    def reimbursement_amount(self, reimbursement_amount):
        """Sets the reimbursement_amount of this BillResultDto.

        医保报销金额  # noqa: E501

        :param reimbursement_amount: The reimbursement_amount of this BillResultDto.
        :type reimbursement_amount: float
        """

        self._reimbursement_amount = reimbursement_amount

    @property
    def remark(self):
        """Gets the remark of this BillResultDto.

        备注  # noqa: E501

        :return: The remark of this BillResultDto.
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this BillResultDto.

        备注  # noqa: E501

        :param remark: The remark of this BillResultDto.
        :type remark: str
        """

        self._remark = remark
