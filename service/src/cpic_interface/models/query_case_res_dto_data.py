# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cpic_interface.models.base_model_ import Model
from cpic_interface.models.case_info_dto import CaseInfoDto
from cpic_interface.models.case_state_dto import CaseStateDto
from cpic_interface.models.image_result_dto import ImageResultDto
from cpic_interface import util

from cpic_interface.models.case_info_dto import CaseInfoDto  # noqa: E501
from cpic_interface.models.case_state_dto import CaseStateDto  # noqa: E501
from cpic_interface.models.image_result_dto import ImageResultDto  # noqa: E501

class QueryCaseResDtoData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_state=None, case_info=None, result=None):  # noqa: E501
        """QueryCaseResDtoData - a model defined in OpenAPI

        :param case_state: The case_state of this QueryCaseResDtoData.  # noqa: E501
        :type case_state: CaseStateDto
        :param case_info: The case_info of this QueryCaseResDtoData.  # noqa: E501
        :type case_info: CaseInfoDto
        :param result: The result of this QueryCaseResDtoData.  # noqa: E501
        :type result: List[ImageResultDto]
        """
        self.openapi_types = {
            'case_state': CaseStateDto,
            'case_info': CaseInfoDto,
            'result': List[ImageResultDto]
        }

        self.attribute_map = {
            'case_state': 'caseState',
            'case_info': 'caseInfo',
            'result': 'result'
        }

        self._case_state = case_state
        self._case_info = case_info
        self._result = result

    @classmethod
    def from_dict(cls, dikt) -> 'QueryCaseResDtoData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryCaseResDto_data of this QueryCaseResDtoData.  # noqa: E501
        :rtype: QueryCaseResDtoData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_state(self):
        """Gets the case_state of this QueryCaseResDtoData.


        :return: The case_state of this QueryCaseResDtoData.
        :rtype: CaseStateDto
        """
        return self._case_state

    @case_state.setter
    def case_state(self, case_state):
        """Sets the case_state of this QueryCaseResDtoData.


        :param case_state: The case_state of this QueryCaseResDtoData.
        :type case_state: CaseStateDto
        """

        self._case_state = case_state

    @property
    def case_info(self):
        """Gets the case_info of this QueryCaseResDtoData.


        :return: The case_info of this QueryCaseResDtoData.
        :rtype: CaseInfoDto
        """
        return self._case_info

    @case_info.setter
    def case_info(self, case_info):
        """Sets the case_info of this QueryCaseResDtoData.


        :param case_info: The case_info of this QueryCaseResDtoData.
        :type case_info: CaseInfoDto
        """

        self._case_info = case_info

    @property
    def result(self):
        """Gets the result of this QueryCaseResDtoData.

        以每张图片为单位，汇总所有的识别结果。  # noqa: E501

        :return: The result of this QueryCaseResDtoData.
        :rtype: List[ImageResultDto]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this QueryCaseResDtoData.

        以每张图片为单位，汇总所有的识别结果。  # noqa: E501

        :param result: The result of this QueryCaseResDtoData.
        :type result: List[ImageResultDto]
        """

        self._result = result
